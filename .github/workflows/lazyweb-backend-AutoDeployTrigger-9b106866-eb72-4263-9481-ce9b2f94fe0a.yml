name: Deploy to Azure Container Apps

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  IMAGE_NAME: lazyweb-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push image to ACR
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ./Dockerfile
          context: .
          secrets: |
            "dotenv=${{ github.workspace }}/.env"
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Prepare environment variables
        run: |
          ENVVARS="BACKEND_URL=secretref:backend-url"
          ENVVARS="$ENVVARS,BUCKET_NAME=secretref:bucket-name"
          ENVVARS="$ENVVARS,EMAIL_PASSWORD=secretref:email-password"
          ENVVARS="$ENVVARS,EMAIL_SERVICE=secretref:email-service"
          ENVVARS="$ENVVARS,EMAIL_USER=secretref:email-user"
          ENVVARS="$ENVVARS,ENDPOINT=secretref:endpoint"
          ENVVARS="$ENVVARS,FRONTEND_URL=secretref:frontend-url"
          ENVVARS="$ENVVARS,GITHUB_API_URL=secretref:github-api-url"
          ENVVARS="$ENVVARS,GITHUB_AUTH_URL=secretref:github-auth-url"
          ENVVARS="$ENVVARS,GITHUB_CLIENT_ID=secretref:github-client-id"
          ENVVARS="$ENVVARS,GITHUB_CLIENT_SECRET=secretref:github-client-secret"
          ENVVARS="$ENVVARS,GITHUB_URL=secretref:github-url"
          ENVVARS="$ENVVARS,JWT_SECRET_KEY=secretref:jwt-secret-key"
          ENVVARS="$ENVVARS,MONGO_URI=secretref:mongo-uri"
          ENVVARS="$ENVVARS,OPENAI_API_KEY=secretref:openai-api-key"
          ENVVARS="$ENVVARS,PUBLIC_ENDPOINT=secretref:public-endpoint"
          ENVVARS="$ENVVARS,R2_ACCESS_KEY_ID=secretref:r2-access-key-id"
          ENVVARS="$ENVVARS,R2_SECRET_ACCESS_KEY=secretref:r2-secret-access-key"
          ENVVARS="$ENVVARS,SES_ACCESS_KEY=secretref:ses-access-key"
          ENVVARS="$ENVVARS,SES_SCERET_KEY=secretref:ses-secret-key"
          echo "APP_ENVVARS=$ENVVARS" >> $GITHUB_ENV

      - name: Check if Container App exists and create if not
        run: |
          if az containerapp show --name ${{ env.IMAGE_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --query properties.provisioningState -o tsv &>/dev/null; then
            echo "Container App already exists. Will update in next step."
          else
            echo "Container App does not exist. Creating..."
            az containerapp create \
              --name ${{ env.IMAGE_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --environment ${{ secrets.CONTAINER_APP_ENVIRONMENT }} \
              --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --registry-server ${{ secrets.REGISTRY_LOGIN_SERVER }} \
              --registry-username ${{ secrets.REGISTRY_USERNAME }} \
              --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
              --target-port 4000 \
              --ingress external \
              --cpu 2.5 \
              --memory 5Gi \
              --env-vars ${{ env.APP_ENVVARS }}
          fi
      
      - name: Update Azure Container App
        run: |
          az containerapp update \
            --name ${{ env.IMAGE_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --set-env-vars ${{ env.APP_ENVVARS }}
