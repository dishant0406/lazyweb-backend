name: Deploy to Azure Container Apps

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  IMAGE_NAME: lazyweb-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: PRODUCTION
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Create .env file
        run: |
          # Create .env file from GitHub secrets
          echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env
          echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
          echo "EMAIL_SERVICE=${{ secrets.EMAIL_SERVICE }}" >> .env
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
          echo "ENDPOINT=${{ secrets.ENDPOINT }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
          echo "GH_API_URL=${{ secrets.GH_API_URL }}" >> .env
          echo "GH_AUTH_URL=${{ secrets.GH_AUTH_URL }}" >> .env
          echo "GH_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}" >> .env
          echo "GH_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}" >> .env
          echo "GH_URL=${{ secrets.GH_URL }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "PUBLIC_ENDPOINT=${{ secrets.PUBLIC_ENDPOINT }}" >> .env
          echo "R2_ACCESS_KEY_ID=${{ secrets.R2_ACCESS_KEY_ID }}" >> .env
          echo "R2_SECRET_ACCESS_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }}" >> .env
          echo "SES_ACCESS_KEY=${{ secrets.SES_ACCESS_KEY }}" >> .env
          echo "SES_SCERET_KEY=${{ secrets.SES_SCERET_KEY }}" >> .env
          echo "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}" >> .env
      
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      
      - name: Build and push image to ACR
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ./Dockerfile
          context: .
          secrets: |
            "dotenv=${{ github.workspace }}/.env"
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Check if Container App exists and create if not
        run: |
          if az containerapp show --name ${{ env.IMAGE_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }} --query properties.provisioningState -o tsv &>/dev/null; then
            echo "Container App already exists. Will update in next step."
          else
            echo "Container App does not exist. Creating..."
            az containerapp create \
              --name ${{ env.IMAGE_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --environment ${{ secrets.CONTAINER_APP_ENVIRONMENT }} \
              --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --registry-server ${{ secrets.REGISTRY_LOGIN_SERVER }} \
              --registry-username ${{ secrets.REGISTRY_USERNAME }} \
              --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
              --target-port 4000 \
              --ingress external \
              --cpu 2.5 \
              --memory 5Gi
          fi
      
      - name: Update Azure Container App
        run: |
          az containerapp update \
            --name ${{ env.IMAGE_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --image ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
